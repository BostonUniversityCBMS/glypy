<script>

{% if live %}
    live = true;
{% else %}
    live = false;
{% endif %}


window.mobileAndTabletcheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
}


prefix = "cXVpY2sgYnJ"

function _addStoragePrefix(name){
    return prefix + name
}
function _dropStoragePrefix(name){
    return name.replace(prefix, '')
}


defaultOptions = {
    showSidebar: true,
    scoreThreshold: 0.0,
    version: 0.1
}

var UIController = function(){
    for(var name in defaultOptions){
        this[name] = defaultOptions[name]
    }
    this.fromStorage()
}

UIController.prototype.serialize = function(){
    for(var name in this){
        try{
            localStorage.setItem(_addStoragePrefix(name), JSON.stringify(this[name]))
        } catch(err){
            console.error(err)
        }
        
    }
    $.post("/internal/update_preferences", this)
    return this
}

UIController.prototype.fromStorage = function(){
    for(var name in localStorage){
        if(name.search(prefix) != -1){
            this[_dropStoragePrefix(name)] = localStorage.getItem(name)
        }
    }
    return this
}

UIController.prototype.toggleSidebarVisible = function(choice) {
    var handle = $(".sidebar")
    if(choice === undefined){
        handle.toggle()
        this.showSidebar = !this.showSidebar
    } else {
        if(choice){
            handle.show()
            this.showSidebar = true

        } else {
            handle.hide()
            this.showSidebar = false
        }
    }

};

UIController.prototype.setScoreThreshold = function(threshold){
    this.scoreThreshold = threshold
    this.serialize()
}


UI = new UIController()



function followMatchLink(evt){
    evt.preventDefault();
    var handle = $(this).parent()
    var id = handle.attr("data-target")
    window.location.replace("/structure/" + id) 
}

function configureFollowMatchLink(){
    $(".structure-list a").click(followMatchLink)
}

function getSpectrumPlot(){
    var handle = $(this);
    var scanId = handle.text().replace(/,|\s/g, '')
    console.log("Plotting " + scanId)
    $.get('/tandem_spectrum/' + scanId).success(function(plotSVG){
        var plotContent = $(plotSVG)
        plotContent.attr('class', 'spectrum-plot')
        var modal = $('.modal');
        modal.find(".modal-title").text("Tandem Spectrum for " + scanId);
        modal.find(".modal-body").html(plotContent)
        modal.modal('show')
    })
}

function configureSpectrumPlot(){
    $('.scan-numbers span').click(getSpectrumPlot)
}


function getEntryContainer(handle){
    var handle = $(handle === undefined ? (this) : handle)
    origin = handle
    while(true){
        if(handle.is("body")){
            throw new Error("Did not find container")
        }
        if(handle.hasClass("structure-match")){
            return handle
        }
        handle = handle.parent()
    }
}

function getGlycanSVG(handle){
    var handle = $(handle === undefined ? (this) : handle)
    var entryConainer = handle.hasClass("structure-match") ? handle : getEntryContainer(handle)
    var svgContainer = entryConainer.find("svg")
    return svgContainer
}

/**
 *   
 *    
 *   @param handle: - Element containing the complete name of the observed cleavage. Target to be given a :event:`hover` handle for.
 *   @param {jQuery} svgContainer - The container of the <svg></svg> tag that holds the glycan structure image.
 */
function highlightCleavage(handle, svgContainer){
    handle = $(handle === undefined ? (this) : handle)
    svgContainer = svgContainer === undefined ? getGlycanSVG(handle) : svgContainer
    var svgUUID = svgContainer.attr("id")
    var cleavageType = handle.attr("data-target").replace(/\n|\s\s+/g, "").replace(",", "_").split(/-|\+/)
    handle.hover(function(evt){
        for(var i = 0; i < cleavageType.length; i++){
            console.log(cleavageType[i])
            var cleavageGroup = svgContainer.find(("#" + svgUUID + "-" + cleavageType[i]).replace(/\n|\s\s+/g, ""))
            var cleavageTag = svgContainer.find(("#" + svgUUID + "-" + cleavageType[i] + " path, " + "#" + svgUUID + "-" + cleavageType[i] + "-direction path").replace(/\n|\s\s/g, ""))
            cleavageGroup.detach()
            svgContainer.append(cleavageGroup)
            cleavageTag.attr("class", "highlight-cleavage")
        }    
    }, function(evt){ 
        for(var i = 0; i < cleavageType.length; i++){
            var cleavageGroup = svgContainer.find(("#" + svgUUID + "-" + cleavageType[i]).replace(/\n|\s\s+/g, ""))
            var cleavageTag = svgContainer.find(("#" + svgUUID + "-" + cleavageType[i] + " path, " + "#" + svgUUID + "-" + cleavageType[i] + "-direction path").replace(/\n|\s\s/g, ""))

            cleavageTag.attr("class", "")
        }
    })
}


function configureHighlightCleavage(){
    var entries = $(".structure-match")
    entries.each(function(index, entry)
    {
        entry = $(entry)
        var svgContainer = getGlycanSVG(entry)
        entry.find(".match-key").each(function(index, ionName){
            highlightCleavage(ionName, svgContainer)
        })
    })
}


function configureCollapse(){
    var carets = $(".ion-collapse-caret")
    carets.click(collapseIonMatches)
    carets = $(".glycoct-collapse-caret")
    carets.click(collapseGlycoCT)
}

function invertCaret(symbol){
    if(symbol.hasClass("glyphicon-chevron-up")){
        symbol.removeClass("glyphicon-chevron-up")
        symbol.addClass("glyphicon-chevron-down")
    } else {
        symbol.removeClass("glyphicon-chevron-down")
        symbol.addClass("glyphicon-chevron-up")        
    }
}

function collapseIonMatches(evt){
    evt.preventDefault();
    var handle = $(this)
    var symbol = handle.find(".glyphicon")
    var collapseSelector = "tr.per-observation."  + handle.attr("data-target")
    var target = handle.parent().parent().parent().find(collapseSelector)
    target.toggle()
    invertCaret(symbol)
    return false;
}

function collapseGlycoCT(evt){
    evt.preventDefault()
    var handle = $(this)
    var symbol = handle.find(".glyphicon")
    handle.parent().parent().find(".glycoct-container").toggle()
    invertCaret(symbol)
}

$(function(){
    configureCollapse();
    configureHighlightCleavage()
    $('.fraction').each(function(key, value) {
        $this = $(this)
        var split = $this.html().split("/")
        if( split.length == 2 ){
            $this.html('<span class="frac-top">'+split[0]+'</span><span class="frac-bottom">'+split[1]+'</span>')
        }    
    });
    if(live){
        configureSpectrumPlot()
        configureFollowMatchLink()
    }
})


</script>
